class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        solveRecBacktracking(s, 0, result, new ArrayList<>());
        return result;
    }

    private void solveRecBacktracking(String s, int index, List<List<String>> result, List<String> ans){
        //base case
        if(s.length() == index){
            result.add(new ArrayList<>(ans));
            return;
        }

        //backtracking
        for(int i=index; i<s.length(); i++){
            if(isPalindrome(s, index, i)){
                ans.add(s.substring(index, i+1));
                solveRecBacktracking(s,i+1,result,ans);
                ans.remove(ans.size() - 1);
            }
        }
    }

    private boolean isPalindrome(String s, int start, int end){
        while(start <= end){
            if(s.charAt(start++) != s.charAt(end--)){
                return false;
            }
        }
        return true;
    }
}
