/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    //function to find the size of linkedlist
    public int palindrome_size(ListNode root){
        int size = 0;
        ListNode temp = root;
        while(temp != null){
            size++;
            temp = temp.next;
        }
        return size;
    }

    public boolean isPalindrome(ListNode head) {
        //variable to store size of linkedlist
        int n = palindrome_size(head);
        //create array to store element of linkedlist
        int[] new_arr = new int[n];
        int idx = 0;
        ListNode temp = head;
        while(temp != null){
            new_arr[idx] = temp.val;
            idx++;
            temp = temp.next;
        }

        //checking whether it is palindrome or not
        for(int i=0; i<n/2; i++){
            if(new_arr[i] != new_arr[n-1-i]){
                return false;
            }
        }
        return true;
    }
}
