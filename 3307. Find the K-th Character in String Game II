class Solution {
    public char kthCharacter(long k, int[] operations) {
        int n = operations.length;
        long[] lengths = new long[n + 1];  // Store length after each op
        lengths[0] = 1;  // Initial string is "a"

        // Step 1: Calculate final length without building the string
        for (int i = 0; i < n; i++) {
            if (operations[i] == 0) {
                lengths[i + 1] = lengths[i] * 2;
            } else {
                lengths[i + 1] = lengths[i] * 2;
            }

            if (lengths[i + 1] >= k) {
                n = i + 1;
                break;  // No need to calculate beyond required k
            }
        }

        // Step 2: Trace back the character at position k
        char ch = 'a';
        for (int i = n - 1; i >= 0; i--) {
            long half = lengths[i];

            if (k > half) {
                k -= half;  // We are in the appended part
                if (operations[i] == 1) {
                    // For op=1, incremented version, so shift char by +1
                    ch = (char)((ch - 'a' + 1) % 26 + 'a');
                }
            }
            // else: k remains same, stay in first half of string
        }

        return ch;
    }
}
