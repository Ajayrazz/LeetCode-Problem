class Solution {
    public void solveSudoku(char[][] board) {
        //call the helper function with boolean return type
        solve(board);
    }

    //Solve Function To Make Sudoku
    public boolean solve(char[][] board){
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board.length; j++){
                //check whether the cell is empty
                if(board[i][j] == '.'){
                    for(char num = '1'; num <= '9'; num++){
                        if(isValid(num, i, j, board)){
                            //make the changes
                            board[i][j] = num;

                            //recall the function
                            if(solve(board)){
                                return true;
                            }

                            //revert the changes
                            board[i][j] = '.';
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    //isValid Function To Check Whether The Given Position Is Valid Or Not
    public boolean isValid(int num, int row, int col, char[][] board){
        //check 9 * 9
        for(int i = 0; i < board.length; i++){
            if(board[i][col] == num || board[row][i] == num){
                return false;
            }
        }

        int startRow = (row / 3) * 3;
        int startCol = (col / 3) * 3;

        for(int i = startRow; i < startRow + 3; i++){
            for(int j = startCol; j < startCol + 3; j++){
                if(board[i][j] == num){
                    return false;
                }
            }
        }

        return true;
    }
}
