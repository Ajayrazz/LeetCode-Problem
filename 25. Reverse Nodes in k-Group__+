/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        //base case
        if(head == null || head.next == null){
            return head;
        }

        //find the size of the linkedlist
        int size = 0;
        ListNode temp = head;
        while(temp != null){
            size += 1;
            temp = temp.next;
        }

        //case 1
        if(size < k){
            return head;
        }

        //case 2 -> reverse
        ListNode next = null;
        ListNode prev = null;
        ListNode current = head;
        int count = 0;

        while(current != null && count < k){
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
            count += 1;
        }

        if(next != null){
            head.next = reverseKGroup(next, k);
        }

        head = prev;
        return head;
    }
}
