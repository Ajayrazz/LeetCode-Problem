class Solution {
    public boolean isMatch(String s, String p) {
        int n = s.length();
        int m = p.length();
        int[][] dp = new int[n][m];
        //fill the dp with -1
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        return wildcardMatching(n - 1, m - 1, s, p, dp) == 1;
    }

    public int wildcardMatching(int i, int j, String s1, String s2, int[][] dp){
        //if both the string are exhausted
        if(i < 0 && j < 0) return 1;
        //case 2
        if(j < 0 && i >= 0) return 0;
        //case 3
        if(i < 0 && j >= 0){
            return allStars(s2, j) ? 1 : 0;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        if(s2.charAt(j) == s1.charAt(i) || s2.charAt(j) == '?'){
            return dp[i][j] = wildcardMatching(i - 1, j - 1, s1, s2, dp);
        }
        else if(s2.charAt(j) == '*'){
            return dp[i][j] = (wildcardMatching(i - 1, j, s1, s2, dp) == 1 || wildcardMatching(i, j - 1, s1, s2, dp) == 1) ? 1 : 0;
        }
        else {
            return dp[i][j] = 0;
        }
    }

    public boolean allStars(String str, int j){
        for(int k = 0; k <= j; k++){
            if(str.charAt(k) != '*') return false;
        }
        return true;
    }
}
