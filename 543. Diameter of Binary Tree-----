/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    //function to find the height of the binary tree
    public int height(TreeNode root){
        //base case
        if(root == null){
            return 0;
        }
        int leftht = height(root.left);
        int rightht = height(root.right);

        return Math.max(leftht , rightht) + 1;
    }

    //function to find  the diameter of a binary tree
    public int diameterOfBinaryTree(TreeNode root) {
        //base case
        if(root == null){
            return 0;
        }
        //function recalling for height
        int leftheight = height(root.left);
        int rightheight = height(root.right);

        int selfdiam = (leftheight + rightheight);
        //function recalling for getting left diameter and rightdiameter
        int leftdiam = diameterOfBinaryTree(root.left);
        int rightdiam = diameterOfBinaryTree(root.right);

        return Math.max(selfdiam , Math.max(leftdiam , rightdiam));
    }
}
