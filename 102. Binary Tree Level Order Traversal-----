/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        //create list of list
        List<List<Integer>> list = new ArrayList<>();
        //base case
        if(root == null){
            return list;
        }

        //create Queue
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.add(root);

        //using while loop
        while(queue.size() != 0){
            List<Integer> ans = new ArrayList<>();
            int size = queue.size();
            //using while for iterating 
            while(size > 0){
                TreeNode rem = queue.poll();
                ans.add(rem.val);
                //case 1 for iterating left child of rem
                if(rem.left != null){
                    queue.add(rem.left);
                }
                //case 2 for iterating right child of rem
                if(rem.right != null){
                    queue.add(rem.right);
                }
                size--;
            }
            list.add(ans);
        }
        return list;
    }
}
