class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n][n + 1];
        //fill dp with -1
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }

        return lengthOfLISUtil(0, -1, n, nums, dp);
    }

    public int lengthOfLISUtil(int index, int prev_index, int n, int[] nums, int[][] dp){
        if(index == n) return 0;
        if(dp[index][prev_index + 1] != -1) return dp[index][prev_index + 1];

        int notTake = lengthOfLISUtil(index + 1, prev_index, n, nums, dp);
        int take = 0;

        if(prev_index == -1 || nums[index] > nums[prev_index]){
            take = 1 + lengthOfLISUtil(index + 1, index, n, nums, dp);
        }

        //update dp and return it
        return dp[index][prev_index + 1] = Math.max(take, notTake);
    }
}
