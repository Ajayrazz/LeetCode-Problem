/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> ans = new ArrayList<>();
        //base case
        if(root == null){
            return ans;
        }
        //create Queue
        Queue<Node> queue = new ArrayDeque<>();
        queue.add(root);
        while(queue.size() != 0){
            List<Integer> list = new ArrayList<>();
            int size = queue.size();
            while(size-- > 0){
                Node rem = queue.poll();
                list.add(rem.val);

                // case 1
                for(int i=0; i<rem.children.size(); i++){
                    queue.add(rem.children.get(i));
                }
            }
            ans.add(list);
        }
        return ans;
    }
}
