class Solution {
    public int trap(int[] height) {
        //Array for left max boundary
        int[] leftMax = new int[height.length];
        //inititalize leftMax
        leftMax[0] = height[0];
        //for loop for iterating height
        for(int i=1; i<height.length; i++){
            leftMax[i] = Math.max(height[i], leftMax[i-1]);
        }
        //Array for right max boundary
        int[] rightMax = new int[height.length];
        rightMax[height.length-1] = height[height.length-1];
        //for loop for iterating height array 
        for(int i=height.length-2; i>=0; i--){
            rightMax[i] = Math.max(height[i], rightMax[i+1]);
        }

        //variable to store the output of the program
        int trapped = 0;

        //for loop for final output
        for(int i=0; i<height.length; i++){
            int tot_water = Math.min(leftMax[i], rightMax[i]);
            trapped += (tot_water - height[i]);
        }
        return trapped;
    }
}
