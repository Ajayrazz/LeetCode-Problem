/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        //base case
        if(root == null) return root;
        //case 1 : if key is less the value of root
        if(root.val < key){
            root.right = deleteNode(root.right, key);
        }
        //case 2 : if key is greater the value of root
        else if(root.val > key){
            root.left = deleteNode(root.left, key);
        }
        //case 3
        else {
            if(root.left == null) {
                return root.right;
            }
            else if(root.right == null) {
                return root.left;
            }
            else {
                TreeNode temp = minValueNode(root.right);
                root.val = temp.val;
                root.right = deleteNode(root.right, temp.val);
            }
        }

        //return the final output after deleting the node
        return root;
    }

    //Helper function to find the minimum value node in the left subtree
    private TreeNode minValueNode(TreeNode current){
        //case
        while(current.left != null) {
            current = current.left;
        }
        return current;
    }
}
