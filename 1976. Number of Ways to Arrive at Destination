class Solution {
    long inf = Long.MAX_VALUE / 2;
    int mod = 1_000_000_007;

    public int countPaths(int n, int[][] roads) {
        long[][] graph = new long[n][n]; // Adjacency matrix
        long[] dist = new long[n]; // Stores shortest distances
        long[] count = new long[n]; // Stores number of shortest paths
        boolean[] visited = new boolean[n]; // Tracks visited nodes

        // Initialize graph with infinite weights
        for (int i = 0; i < n; i++) {
            Arrays.fill(graph[i], inf);
        }
        Arrays.fill(dist, inf);

        // Build the adjacency matrix
        for (int[] r : roads) {
            int u = r[0], v = r[1], time = r[2];
            graph[u][v] = time;
            graph[v][u] = time;
        }

        // Initialize starting node
        dist[0] = 0;
        count[0] = 1;

        // Dijkstraâ€™s Algorithm
        for (int i = 0; i < n; i++) {
            int cur = -1;

            // Select the unvisited node with the smallest distance
            for (int j = 0; j < n; j++) {
                if (!visited[j] && (cur == -1 || dist[j] < dist[cur])) {
                    cur = j;
                }
            }

            visited[cur] = true; // Mark as visited

            // Relax edges
            for (int j = 0; j < n; j++) {
                if (j == cur) continue;

                long newDist = dist[cur] + graph[cur][j];
                if (dist[j] > newDist) {
                    dist[j] = newDist;
                    count[j] = count[cur]; // Reset path count
                } else if (dist[j] == newDist) {
                    count[j] += count[cur]; // Add new shortest paths
                    count[j] %= mod;
                }
            }
        }

        return (int) count[n - 1];
    }
}
