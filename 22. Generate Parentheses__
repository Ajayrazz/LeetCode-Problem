class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> ans = new ArrayList<>();
        //function recalling 
        dfs(0, 0, "", n, ans);
        return ans;
    }

    //function for generating parenthesis
    public void dfs(int openP, int closeP, String s, int n, List<String> ans){
        //base case
        if(openP == closeP && openP + closeP == 2 * n){
            ans.add(s);
            return;
        }

        //case 1
        if(openP < n){
            dfs(openP+1, closeP, s + "(", n, ans);
        }

        //case 2
        if(closeP < openP){
            dfs(openP, closeP+1, s + ")", n, ans);
        }
    }
}
