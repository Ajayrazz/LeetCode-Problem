class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        //function recalling for getting final result
        permuteRect(nums, 0, result);
        return result;
    }

    //function for finding all the permutation
    public void permuteRect(int[] nums, int currentIndex, List<List<Integer>> result){
        //Base case
        if(currentIndex == nums.length - 1){
            //create 1d list
            List<Integer> ans = new ArrayList<>();;
            //put the element of nums in 
            for(int num : nums){
                ans.add(num);
            }
            result.add(ans);
            return;
        }

        for(int i=currentIndex; i<nums.length; i++){
            swap(nums, currentIndex, i);
            permuteRect(nums, currentIndex + 1, result);
            swap(nums, currentIndex, i);
        }
    }

    //function for swapping element
    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
